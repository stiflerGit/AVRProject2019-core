/* Include s3d symbols */
#include <Script3d.h>

#include "../core/Player/PlayerModel.s3d"

/**
 * SERVER CONFIGURATION
 */
#define CONF_SERVER_ADDRESS "localhost"	/**< address of the server */
#define CONF_SERVER_PORT 5555			/**< port of the server. */
#define CONF_MAX_NPLAYERS 2				/**< max number of players. */

/**
 * Gloval variables
 */

var mylevel;	/**< Level Obj, main level */	

var listenCh;	/**< int, listen channel where clients first connect */

var clients = Array(CONF_MAX_NPLAYERS);	/**< Array of Array = {ch, player} all clients array
 										 * ch	int, channel for communication purpose
 										 * player	PlayerModel Obj, player model of the client
 										 */
var freeIDs = Array(0);	/**< int Array, free id to assign to new players */

/**
 * delete the first free id from freeIDS
 * 
 * @return int, first free id
 */
function delFirstFreeID() {
	if (len(freeIDs)>0) {
		var id = freeIDs[0];
		adel(freeIDs, 0);
		return id;
	}
}

/**
 * add an id to freeIDS
 * 
 * @param[in]	ID	int, Id to add
 */
function addFreeID(ID) {
	foreach (var idx in freeIDs) {
		if(idx == ID) {
			return;
		}
	}
	aadd(freeIDs, ID);
}

/** ##############################################################
 *		FUNCTIONS TO COMMUNICATE WITH CLIENTS 
 * ############################################################### */

/* accept a new connection with a client
 * 
 * @return client channel, eventual error
 */ 
function acceptNewClient();

/**
 * Receive data from client channel
 * 
 * @return data received
 */
function receiveDataFromClient(clientCh);

/**
 * send data to a client
 * 
 * @param[in]	clientCh	int, channel to use for send
 * @param[in]	data		generic var, data to send
 */
function sendDataToClient(clientCh, data);

/**
 * send data to all clients
 * 
 * @param[in]	data		generic var, data to send
 */
function sendDataToAllClients(data);

/**
 * send models of all players(player.Marshall) to all client
 * 
 */
function sendAllModelsToAllClients();

/**
 * initialize a new client
 */
function initNewClient();

/**
 * close the connection with a disconnected client
 */
function clientClose(client);

/**
 * check collision between shooted bullets of a player and all other entities
 * 
 * Remove the bullets that collides(bullet = void)
 * 
 * @param[in]	player	player whom to check bullets
 */
function processBulletsCollision(player);

/**
 * return a x,y position of the level where there isn't a wall
 * 
 * @return	vector, xy free of wall position 
 */
function getRandomFreePosition();

//
function OnDownload() {
	FileDownload("../XVRResources.zip");
}

//
function OnInit(params) {
	OutputLN("");
	OutputLN("[INFO] initializing server");

	OutputLN("[INFO] initializing level");
	mylevel = level();
	mylevel.init("level.txt");
	OutputLN("[INFO] server level initialized");
	
	OutputLN("[INFO] creating listen channel");
	listenCh = NetCreateChannelTCP(CONF_SERVER_PORT, CONF_SERVER_ADDRESS);
	if (listenCh == -1) {
		OutputLN("[ERROR] creating listen channel");
		Quit(listenCh);
	}
	OutputLN("[INFO] listen channel created");
	
	for(var i=0; i<CONF_MAX_NPLAYERS; i++) {
		aadd(freeIDs, i);
	}
	
	SetTimeStep(200);
	
	OutputLn("[INFO] server initialized");
	OutputLn("[INFO] waiting for a client to connect");
}

//
function OnFrame() {
	var isDataReady;
	var update = false;
	
	// check new player connection
	isDataReady = NetDataReady(listenCh);
	if(isDataReady) {
		OutputLN("[INFO] new client connected");
		var playerIdAndErr = initNewClient();
		var pid = playerIdAndErr[0], err = playerIdAndErr[1];
		if (err != void) {
			OutputLn("[ERROR] initNewClient: " + err);
			Quit(err);
		}
		sendAllModelsToAllClients();
	}
	// update players models
	for (var i = 0; i < len(clients); i++) {
		if (clients[i] == void) {
			continue;
		}
		
		var ch = clients[i][0], player = clients[i][1];
	
		var data = 0;	
		isDataReady = NetDataReady(ch);			
		if (isDataReady) {
			data = receiveDataFromClient(ch);
			if (data == void){
				OutputLn(Sprintf("[INFO] client %d disconnected", player.ID));
				clientClose(i);
				var dd = Array(CONF_MAX_NPLAYERS);
				dd[i] = {};
				sendDataToAllClients(dd);
				continue;
			}
		}
		// check if data is string. These are special commands.
		if (valtype(data) == "S") {
			if (data == "restart" && player.IsDead()) {
				player.Restart(getRandomFreePosition());
			}
			data = 0;
		}
		
		processBulletsCollision(player);
		player.Update(data);
	}
		
}

//
function OnTimer() {
	static var oldplayerData = Array(CONF_MAX_NPLAYERS);
	static var c = 0;
//	OutputLN(c);
	c++;
	if (c%5 != 0) {
		return;
	}
	
	var playerDeltaData= Array(CONF_MAX_NPLAYERS);
	var update = false;
	for (var i = 0; i < len(clients); i++) {
		if (clients[i] == void) {
			if (oldplayerData[i] != void) {
				if (len(oldplayerData[i]) != 0) {
					oldPlayerData[i] = {};
					update = true;	
				} else {
					oldplayerData[i] = void;
				}	
			}
			continue;
		}
		
		var ch = clients[i][0], player = clients[i][1];
		var deltaAndErr = player.MarshallDelta(oldPlayerData[i]);
		var deltaData = deltaAndErr[0], err = deltaAndErr[1]; 
		
		if(err != void) {
			OutputLn("[ERROR] player.MarshallDelta: " + err);
			continue;
//			Quit(err); // better don't quit
		}
		
		playerDeltaData[i] =  deltaData;
				
		if (playerDeltaData[i] != void) {
			update = true;
		}
		
		oldPlayerData[i] = player.Marshall();
		player.RemoveVoidBullets();
	}
	
	if(update) {
		sendDataToAllClients(playerDeltaData);	
	}
}

//
function processBulletsCollision(pp){
	var bullets = pp.shootedBullets;
	 
	for (var i=0; i<len(bullets); i++) {
		var bullet = bullets[i];
		
		if (bullet == void) {
			continue;
		}
		
		for (var j=0; j<len(clients); j++) {
			if (clients[j] == void) {
				continue;
			}
			var ch = clients[j][0], player = clients[j][1];
			
			if (bullet.pid == player.ID) {
				continue;
			}
				
			if (player.isCollidingWithBullet(bullet)) {
				player.Hp -= bullet.damage;
				outputLn("[INFO] player ", pp.ID, " hit player ", player.ID);
				if (player.Hp <= 0){
					// player dead; do something ??
					OutputLn("[INFO] player ", pp.ID, " kill player ", player.ID);
				}
				pp.shootedBullets[i] = void;
				break;
			}
		}
	}
	// collision with walls
	for (var i=0; i<len(bullets); i++) {
		var bullet = bullets[i];

		if(bullet == void) {
			continue;
		}
		
		var wall = mylevel.GetWallObjAtPosition(bullet.position);
		if (wall != void) {
			pp.shootedBullets[i] = void;
		}
	}
}

//
function getRandomFreePosition() {
	var maxVal = len(myLevel.freeIndexes);
	var freeIndex = myLevel.freeIndexes[Rand(maxVal)];
	var pos = [freeIndex[1], 0, freeIndex[0]];
	
	return pos;
}

//
function acceptNewClient(){
	var clientCh = -1;
	while(clientCh == -1){
		clientCh = NetAcceptTCP(listenCh, VR_NO_BLOCKING);	
		if (clientCh == 0){
			return {clientCh, "NetAcceptTCP: " + str(clientCh)};
		}
	}
	return {clientCh, void};
}

//
function receiveDataFromClient(listenCh) {
	var data = NetVarReceiveFromTCP(listenCh);
	OutputLN("[INFO] receiveDataFromClient: ", data);
	return data;
}

//
function sendDataToClient(outputCh, data) {
	NetVarSendToTCP(outputCh, data);
}

//
function sendDataToAllClients(data) {
	foreach(var client in clients) {
		if (client != void) {
			var ch = client[0];
			sendDataToClient(ch, data);	
		}
	}
}

//
function sendAllModelsToAllClients() {
	var playerModels = Array(CONF_MAX_NPLAYERS);
	for (var i = 0; i < len(clients); i++) {
		if (clients[i] == void) {
			playerModels[i] = void;
			continue;
		}

		var player = clients[i][1];
		playerModels[i] = clients[i][1].Marshall();
    }
    sendDataToAllClients(playerModels);
}

//
function initNewClient() {
	var clientChAndErr = acceptNewClient();
	var clientCh = clientChAndErr[0], err = clientChAndErr[1];
	if (err != void) {
		return {void, Sprintf("acceptNewClient: %s\n", err)};
	}
	// initialize a player model
	var pid = delFirstFreeID();
	var p = PlayerModel(mylevel, pid, getRandomFreePosition());
	clients[pid] = {clientCh, p};
	// response to client
	var model = p.Marshall();
	sendDataToClient(clientCh, model);
	return {pid, void};
}

//
function clientClose(id) {
	var client = clients[id];
	var ch = client[0], p = client[1];
	
	clients[id] = void;
	addFreeID(id);
	
	NetClose(ch);
//	TODO: p.free???
}

//
function DownloadReady(RequestID){}

//
function OnEvent(eventID, wparam, lparam){}

//
function OnError(){}

//
function OnExit() {}
