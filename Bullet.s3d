#ifndef BULLET_S3D
#define BULLET_S3D

#define BULLET_DEFAULT_SPEED 0.2

class Bullet {
	// playerID
	var Pid;
	// graphic
	var mesh;
	var obj;
	// model
	var position;
	var direction;
	var speed;
	var damage;
	
	Init(pos, dir, dmg, speed);
	Update();
	Draw();
	GetModel();
	GetDeltaModel(model);
	SetModel(model);
};

function Bullet::GetModel() {
	return {
		{ "Pid", Pid},
		{ "position", position},
		{ "direction", direction},
		{ "speed", speed},
		{ "damage", damage}
	};
}

function Bullet::GetDeltaModel(model) {
	var myModel = this.GetModel();
	
	if (len(model) == 0) {
		return myModel;
	}
	
	var deltaModel = Array(0);
	for (var i=0,j=0; i<len(myModel); i++){
		var myModelKey = myModel[i][0], myModelVal = myModel[i][1];
		
		if (myModelkey=="shootedBullets" || j >= len(model)) {
			aadd(deltaModel, myModel[i]);
			continue;
		}
		
		var modelKey = model[j][0], modelVal = model[j][1];
		
		if(myModelKey == modelKey) {
			if (myModelVal != modelVal) {
				aadd(deltaModel, myModel[i]);
			}
			j++;
		} else {
			aadd(deltaModel, myModel[i]);	
		}
		
	}
	
	if(len(deltaModel) == 0) {
		return void;
	}
		
	return deltaModel;
}

function Bullet::SetModel(model){
	
	if (len(model) == 0) {
		return;
	}
	
	foreach(var field in model) {
		var key = field[0], value = field[1];
		
		switch(key) {
		case "Pid":
			this.Pid = value;
			break;
		case "position":
			this.position = value;
			break;
		case "direction":
			this.direction = direction;
			break;
		case "speed":
			this.speed = speed;
			break;
		case "damage":
			this.damage = damage;
			break;
		}
	}
	
	obj.SetPosition(position);
}

function Bullet::Bullet(pid) {
	this.Pid = pid;
}

function Bullet::Init(pos, dir, dmg, spd) {
	position  = pos + [0,1,0];
	direction = dir;
	damage = dmg;
	speed = spd;
	
	var mesh = CVMNewMesh(VRP_BOX);
	obj = CVmObj(mesh);
	obj.SetScale(0.1);
	obj.SetPosition(position);
}

function Bullet::Update()
{
	position += direction*speed;
	obj.SetPosition(position);
}

function Bullet::Draw()
{
	obj.draw();
	obj.DrawBoundingBox();
}

#endif
