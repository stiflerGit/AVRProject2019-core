#ifndef PLAYER_GFX_S3D
#define PLAYER_GFX_S3D

#include "PlayerModel.s3d"
#include "../Level.s3d"
#include "../Weapon/WeaponGFX.s3d"
#include "../Bullet/BulletGFX.s3d"

#define SWAT_START_WALK 16
#define SWAT_END_WALK   48

class PlayerGFX : PlayerModel {
	var level;
	// graphics
	var lowerObj;
	var upperObj;
	var obj;
	var currentFrame;
	var frameStep;
	var color;
	// sound
	var step_fx;
	
	Unmarshall(data);
	Init(col);
	Draw();
	SetPosition(pos);
	SetRotation(angle);
	Update(event);
	
	updateCurrentFrameToNextFrame();
	updateCurrentFrameToPrevFrame();
};

function PlayerGFX::Unmarshall(data) {
	
	PlayerModel::this.Unmarshall(data);
	
	if (hVel > 0) {
		updateCurrentFrameToNextFrame();
	} else if(hVel < 0) {
		updateCurrentFrameToPrevFrame();
	}
}

function PlayerGFX::SetPosition(position)
{
	this.position = position;
	obj.setposition(this.position);
}

function PlayerGFX::SetRotation(angle)
{
	this.angle = angle;
	this.direction = [sin(angle), 0, cos(angle)];
	obj.setrotation(angle*180.0/PI, 0, 1, 0);
}


function PlayerGFX::Init(color) {	
	
	this.color = color;
	
	var lowerMesh =  CVmNewMesh("swat_lower.aam");
	lowerObj = CVmObj(lowerMesh);
	var scaling = lowerObj.Normalize(1);
	var upperMesh = CVmNewMesh("swat_upper.aam");
	upperObj = CVmObj(upperMesh);
	upperObj.SetScale(scaling);
	
	obj = CVmObj();
	obj.addchild(upperObj);
	obj.addchild(lowerObj);
	
	weapon = NewRailGun(this.ID, scaling);
	obj.addchild(weapon.obj);
	
	obj.ModulateMaterials(color);
	// sound
	step_fx  = CVmVRAWAV("step.wav");
	// init
	frameStep = 1.0;
	currentFrame = SWAT_START_WALK;
	
	SetRotation(this.angle);
	SetPosition(this.position);
	
}

function PlayerGFX::Update(event) {
	PlayerModel::this.Update(event);
	
	static var jumpGravity = 0.0, oldposition = position;
	var runMultiplicator;
	if (!isInTheAir) {
		if (isEventSet(event, PLAYER_RUN)) {
			runMultiplicator = 1.5;
		} else {
			runMultiplicator = 1.0;
		}
		
		if (isEventSet(event, PLAYER_UP)) {
			UpdateCurrentFrameToNextFrame();
		} else if (isEventSet(event, PLAYER_DOWN)) {
			UpdateCurrentFrameToPrevFrame();
		}
	}	
}

function PlayerGFX::Draw()
{
	SetRotation(angle);
	SetPosition(position);
	obj.draw(VR_FRAMENUMBER, currentFrame);
	foreach (var bullet in shootedBullets) {
		if (bullet != void) {
			var b = BulletGFX(ID, bullet.position, bullet.direction, bullet.speed, bullet.damage);
			b.Init();
			b.Draw();
		}
	}
}

function PlayerGFX::updateCurrentFrameToNextFrame() {
	currentFrame += frameStep;
	if (currentFrame > SWAT_END_WALK){
		step_fx.play();
		currentFrame = SWAT_START_WALK;
	}
}

function PlayerGFX::updateCurrentFrameToPrevFrame() {
	currentFrame;
	currentFrame -= frameStep;
	if (currentFrame < SWAT_START_WALK){
		step_fx.play();
		currentFrame = SWAT_END_WALK;
	}
}

#endif
