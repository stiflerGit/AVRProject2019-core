#ifndef PLAYER_MODEL_S3D
#define PLAYER_MODEL_S3D

#include "../Level.s3d"
#include "../Weapon/WeaponModel.s3d"
#include "../Bullet/BulletModel.s3d"

// defaults
#define PLAYER_DEFAULT_HP 100
#define PLAYER_DEFAULT_ANGLE 0
#define PLAYER_DEFAULT_NOWNBULLETS 100
#define PLAYER_DEFAULT_STEP 0.1

// physics
#define PLAYER_JUMP_HEIGHT 1.1
#define PLAYER_JUMP_LENGTH 3
#define PLAYER_VELOCITY 1.0

// input events
#define PLAYER_RUN 1
#define PLAYER_LEFT 2
#define PLAYER_RIGHT 4
#define PLAYER_UP 8
#define PLAYER_DOWN 16
#define PLAYER_SHOOT 32
#define PLAYER_RELOAD 64
#define PLAYER_JUMP 128

function isEventSet(event, maskEvent) {
	var res = event & maskevent;
	if(res == 0){
		return false;
	}
	return true;
}

class PlayerModel {
	// parent
	var level;
	//
	var ID;
	var position;
	var angle;
	var direction;
	var hVel, vVel; /**< horizontal and vertical velocity */
	var step;
	//
	var weapon;
	var shootedBullets;
	var nOwnedBullets;
	var reloadTimeout;
	var isInTheAir;
	var hp;
	
	Init(col);
	Draw();
	Marshall();
	MarshallDelta(model);
	Unmarshall(model);
	UnmarshallShootedBullets(model);
	MarshallShootedBullets();
	MarshallShootedBulletsDelta(model);
	GetHeadPosition();
	Update(event);
	RemoveVoidBullets();
	
	reload();
	isReloading();
	isPathCollidingWithWall(oldposition, position);
	isPathCollidingWithWallOnTop(oldposition, position);
	postProcessPositionAndAirState(oldposition);
};

function PlayerModel::PlayerModel(level, ID, position, angle, step, nOwnedBullets, hp, weapon){
	
	this.level = level;
	
	this.ID = ID;
	
	this.position = position;
	
	if (angle == void) {
		angle = PLAYER_DEFAULT_ANGLE;
	}
	this.angle = angle;
	direction = [sin(angle), 0, cos(angle)];
	
	if (step == void) {
		step = PLAYER_DEFAULT_STEP;
	}
	this.step = step;
	
	if (nOwnedBullets == void){
		nOwnedBullets = PLAYER_DEFAULT_NOWNBULLETS; 
	}
	this.nOwnedBullets = nOwnedBullets;
	
	this.nOwnedBullets = nOwnedBullets;
	if (hp == void){
		hp = PLAYER_DEFAULT_HP;
	}
	this.hp = hp;
	
	if (this.weapon == void) {
		weapon = NewRailGunModel(this.ID);
	}
	this.weapon = weapon;
	
	isInTheAir = false;
	hVel = 0.0;
	vVel = 0.0;
	reloadTimeout = 0.0;
	
	shootedBullets = Array(0);
}

function PlayerModel::Marshall() {
	
	var bulletsData = MarshallShootedBullets();
	
	var data = {
		{"ID", ID},
		{"position", position},
		{"angle", angle},
		{"direction", direction},
		{"hVel", hVel},
		{"vVel", vVel},
		{"nOwnedBullets", nOwnedBullets},
		{"reloadTimeout", reloadTimeout},
		{"isInTheAir", isInTheAir},
		{"hp", hp},
		{"shootedBullets", bulletsData}
	};
	
	return data;
}

/**
 * Wath do you have to apply to model to a player to be equal to me??
 */
function PlayerModel::MarshallDelta(Data) {
	var myData = this.Marshall();
	
	if (Data == void || len(Data) == 0) {
		return myData;
	}
	
	if(len(data) < len(myData)) {
		OutputLN("ERROR len(model) < len(myModel)");
	}
	
	var deltaData = Array(0);
	for (var i=0; i<len(myData); i++){
		var myDataKey = myData[i][0], myDataVal = myData[i][1];
		var DataKey = Data[i][0], DataVal = Data[i][1];
		
		if (myDataKey=="shootedBullets") {
//			var shootedBulletDeltaDatas = MarshallShootedBulletsDelta(DataVal);
//			if (shootedBulletDeltaDatas != void) {
			if (myDataVal != void) {
				aadd(deltaData, {"shootedBullets", myDataVal});
			}
//			}
			continue;
		}
		
		if(DataKey != myDataKey) {
			Quit("DataKey != myDataKey");
		}
		
		if (myDataVal != DataVal) {
			aadd(deltaData, myData[i]);
		}
		
	}
	
	if(len(deltaData) == 0) {
		return void;
	}
		
	return deltaData;
}

function PlayerModel::Unmarshall(data) {
	foreach(var field in data) {
		var key = field[0], value = field[1];
		
		switch(key) {
		case "ID":
			this.ID = value;
			break;
		case "position":
			this.position = value;
			break;
		case "angle": 
			this.angle = value;
			break;
		case "direction": 
			this.direction = value;
			break;
		case "hVel": 
			this.hVel = value;
			break;
		case "vVel":
			this.vVel = value;
			break;
		case "nOwnedBullets": 
			this.nOwnedBullets = value;
			break;
		case "reloadTimeout":
			this.reloadTimeout = value;
			break;
		case "isInTheAir": 
			this.isInTheAir = value;
			break;
		case "hp":
			this.hp = value;
			break;
		case "shootedBullets":
			UnmarshallShootedBullets(value);
			break;
		}
	}
}

function PlayerModel::UnmarshallShootedBullets(Data) {
	if(Data == void || len(Data) == 0) {
		return;
	}
	
	asize(shootedBullets, len(Data));
	var bulletDatas = Data;
	for (var i=0; i < len(bulletDatas); i++) {
		var bulletData = bulletDatas[i];
		
		if (bulletData == void) {
			shootedBullets[i] = void;
			continue;
		}
		
		if (len(bulletData) == 0) {
			continue;
		}
		
		if (shootedBullets[i] == void) {
			shootedBullets[i] = BulletModel(this.ID, [0,0,0], [0,0,0], 0, 0);
		}
		shootedBullets[i].Unmarshall(bulletData);
	}
	
}

function PlayerModel::MarshallShootedBullets() {
	var bulletModels = Array(0);
	foreach (var bullet in shootedBullets) {
		if (bullet != void) {
			aadd(bulletModels, bullet.Marshall());	
		} else {
			aadd(bulletModels, void);
		}
	}
	
	if (len(bulletModels) == 0) {
		return void;
	}
	
	return bulletModels;
}


function PlayerModel::MarshallShootedBulletsDelta(model) { 
		
	if(model == void || len(model) == 0) {
		return MarshallShootedBullets();
	}
	
	var deltaModels = Array(0);
	
	for(var i=0; i<len(shootedBullets); i++) {
		var shootedBullet = shootedBullets[i];
		
		if (shootedBullet == void) {
			aadd(deltaModels, void);
			continue;
		}
		
		if (i>len(model) || model[i] == void) {
			aadd(deltaModels, shootedBullet.Marshall());
			continue;
		}
		
		var deltaModel = shootedBullet.MarshallDelta(model[i]);
		if (deltaModel == void) {
			deltaModel = {};
		}
		
		aadd(deltaModels, deltaModel);
	}

}

function PlayerModel::RemoveVoidBullets() {
	// remove deleted bullets
	for(var i=0; i<len(shootedBullets);){
		if (shootedBullets[i] == void) {
			adel(shootedBullets, i);
			continue;
		}
		i++;
	}
}

function PlayerModel::GetHeadPosition()
{
	var headPosition = this.position + (0.3) * this.direction;
	headPosition.y = headPosition.y + 1.5;
	return (headPosition);
}


function PlayerModel::Update(event) {
	static var jumpGravity = 0.0, oldposition = position;
	var runMultiplicator;
		 
	if (!isInTheAir) {
		if (isEventSet(event, PLAYER_RUN)) {
			runMultiplicator = 1.5;
		} else {
			runMultiplicator = 1.0;
		}
		
		if (isEventSet(event, PLAYER_UP)) {
			hVel = PLAYER_VELOCITY * runMultiplicator;
		} else if (isEventSet(event, PLAYER_DOWN)) {
			hVel = -PLAYER_VELOCITY;
		} else{
			hVel = 0;
		}
		
		// angle and direction
		if (isEventSet(event, PLAYER_RIGHT | PLAYER_LEFT)){
			if (isEventSet(event, PLAYER_RIGHT)) {
				angle -= 0.02;
			}
			if (isEventSet(event, PLAYER_LEFT)) {
				angle += 0.02;
			}
			direction = [sin(angle), 0, cos(angle)];
		}
	    
	    if (isEventSet(event, PLAYER_JUMP)) {
	    	var vx;
	    	var h = runMultiplicator * PLAYER_JUMP_HEIGHT;
	    	var xh = runMultiplicator * PLAYER_JUMP_LENGTH / 2.0;
	    	if (hVel != 0) {
	    		vx = abs(hVel);
	    	} else {
	    		vx = PLAYER_VELOCITY;
	    	}
	    	jumpGravity = 2.0 * h * (vx^2) / (xh^2);
	    	vVel = 2.0 * h * vx / xh;
	    	isInTheAir = true;
	    }
	}
	
	if (!isReloading() && isEventSet(event, PLAYER_RELOAD)) {
		this.reload();
	}
		
	if (isEventSet(event, PLAYER_SHOOT)) {
		var bullet = weapon.Shoot(position, direction);
		if (bullet != void) {
			aadd(shootedBullets, bullet);
		}
	}
	
	oldposition = position;
	if (hVel != 0) {
		position += (hVel*direction*step);	
	}
    
    if (isInTheAir) {
    	position.y += (vVel*step - 0.5 * jumpGravity * (step^2));
    	vVel -= (jumpGravity*step);
    	if (position.y <= 0) {
    		position.y = 0.0;
    		vVel = 0.0;
    		jumpGravity = 0.0;
    		isInTheAir = false;
    	}
    }
    
    var ret = postProcessPositionAndAirState(oldposition);
	
	if (isReloading()) {
		reloadTimeout -= 0.01;
	}
	
	weapon.Update();
	
	foreach (var bullet in shootedBullets) {
		if (bullet!= void) {
			bullet.Update();
		}
	}
	
}


function PlayerModel::Reload() {
	if (weapon.nbullets >= weapon.magazineSize){
		return;
	}
	
	if (nOwnedBullets == 0) {
		return;
	}

	var nMissingBullets = weapon.magazineSize - weapon.nBullets;
	if (nOwnedBullets >= nMissingBullets) {
		weapon.nBullets += nMissingBullets;
		nOwnedBullets -= nMissingBullets;
	} else {
		weapon.nBullets += nOwnedBullets;
		nOwnedBullets = 0;
	}
	reloadTimeout = weapon.reloadInterval;	
}

function PlayerModel::isReloading() {
	return reloadTimeout > 0;
}

function PlayerModel::isPathCollidingWithWall(oldposition, position) {
	var wall = level.getWallObjAtPosition(position);
	if (wall == void) {
		return false;
	}
	
	var ContactPoint = vector(3),ContactNormal = vector(3);
	var isColl = wall.isColliding(oldposition, position, &ContactPoint, &ContactNormal);
	if (isColl && ContactPoint != oldposition) {
		return true;
	}
	return false;
}

function PlayerModel::isPathCollidingWithWallOnTop(oldposition, position) {
	var ContactPoint = vector(3),ContactNormal = vector(3);
	
	var wall = level.getWallObjAtPosition(position);
	if (wall == void) {
		return false;
	}

	var isColl = wall.isColliding(oldposition, position, &ContactPoint, &ContactNormal);
	
	if(isColl && ContactPoint != oldposition){
		var wallH = wall.GetScale().y;
		if (ContactNormal == [0,1,0] || ContactPoint.y == wallH) {
			return true;
		}
	}
	return false;
}

function PlayerModel::postProcessPositionAndAirState(oldposition) {
	
	if (oldposition == position) {
		return;
	}
	
	// dir is different from direction cause consider also deltaY
	var dir = Norm(position - oldposition);
	var NextPos = position + 0.7* dir;
	var rside = Norm(direction ^ [0,1,0]);
	var lside = Norm([0,1,0] ^ direction);
	var NextRpos = NextPos + 0.7*rside;
	var NextLpos = NextPos + 0.7*lside;
	
	var positions = {NextPos, NextRpos, NextLpos};
	
	foreach (var pos in positions) {
		if (isPathCollidingWithWall(oldposition, pos)) {
				
			if(isPathCollidingWithWallOnTop(oldposition, pos)) {
				var wall = level.getWallObjAtPosition(pos);
				var wallHeight = wall.GetScale().y;
				position.y = wallHeight;
				isInTheAir = false;
				return;
			}
			position.x = oldposition.x;
			position.z = oldposition.z;
		}	
	}
	
	if (isPathCollidingWithWall(position, oldposition)) {
		isInTheAir = true;
		return;
	}
}

#endif
