#ifndef BULLET_MODEL_S3D
#define BULLET_MODEL_S3D

/**
 * internal defaults
 */
#define BULLET_DEFAULT_SPEED 0.2 /**< speed */

/**
 * BulletModel class represent a bullet
 * 
 * This class provide all methods to manage a bullet
 * 
 */
class BulletModel {
	var Pid; /**< int, id of the player owning this */
	
	var position; 	/**< vector, space position  */
	var direction;	/**< vector, going direction */
	var speed;		/**< float, moving speed  */
	var damage;		/**< int, damage points, subtracted to a 
					 *	player hp when it collides with him */
	var dead;		/**< bool, true if the bullet is dead */
					 
	var radiusOfInfluence; /**< float, radius of the bullet */
	
	
	/**
	 * BulletModel Ctor
	 * 
	 * @param[in]	pid		int, player id
	 * @param[in]	position	float vector, space position
	 * @param[in]	direction	float vector, going direction
	 * @param[in]	speed		float, modulus of the speed
	 * @param[in]	damage		float, damage point
	 * @param[in]	radiusOfInfluence	float, radius of the bullet
	 * @return	BulletModel
	 * 		
	 */
	BulletModel(pid, position, direction, speed, damage, radiusOfInfluence);
	
	/**
	 * Update state (position, direction and speed are constants for now)
	 */
	Update();
	
	Kill();
	IsDead();
	
	/**
	 * Check if is colliding with a point
	 * 
	 * @return	true if it is colliding, false otherwise
	 */
	IsCollidingWithPoint(point);
	
	/**
	 * Check if is colliding with a sphere
	 * 
	 * @return	true if it is colliding, false otherwise
	 */
	IsCollidingWithSphere(center, radius);
	
	/**
	 * Marshal and Unmarshal functions to comunicate with server 
	 */
	Marshal();
	MarshalDelta(model);
	Unmarshal(model);
};

//
function BulletModel::BulletModel(pid, position, direction, speed, damage, radiusOfInfluence) {
	
	this.pid = pid;
	
	this.position = position;
	
	this.direction = direction;
	
	if (speed == void){
		speed = BULLET_DEFAULT_SPEED; 
	}
	this.speed = speed;
	
	this.damage = damage;
	
	this.radiusOfInfluence = radiusOfInfluence;
	this.dead = false;
}

function BulletModel::Kill() {
	dead = true;
}

function BulletModel::IsDead() {
	return dead;
}

//
function BulletModel::Update() {
	if(!dead) {
		position += direction*speed;
	}
}

//
function BulletModel::IsCollidingWithPoint(point) {
	var delta = point - this.position;
	var mod = modulus(delta);
	
	if (mod <= radiusOfInfluence) {
		return true;
	}
	return false;
}

//
function BulletModel::IsCollidingWithSphere(center, radius) {
	var delta = center - this.position;
	var mod = modulus(delta);
	
	if (mod <= radiusOfInfluence + radius) {
		return true;
	}
	return false; 
}

//
function BulletModel::Marshal() {
	return {
		{ "Pid", Pid},
		{ "position", position},
		{ "direction", direction},
		{ "speed", speed},
		{ "damage", damage},
		{ "rof", radiusOfInfluence},
		{ "dead", dead}
	};
}

//
function BulletModel::MarshalDelta(Data) {
	var myData = this.Marshal();
	
	if (data == void || len(data) == 0) {
		return {myData, void};
	}
	
	if(len(data) < len(myData)) {
		return {void, "incomplete input data for compare"};
	}
	
	var deltaData = Array(0);
	for (var i=0; i<len(myData); i++){
		var myDataKey = myData[i][0], myDataVal = myData[i][1];		
		var dataKey = Data[i][0], dataVal = Data[i][1];
		
		if(DataKey != myDataKey) {
			return {void, Sprintf("key number %d differ, myDataKey=%s, inputDataKey=%s",i, myDataKey, DataKey)};
		}
		
		if (myDataVal != DataVal) {
			aadd(deltaData, myData[i]);
		}
		
	}
	
	if(len(deltaData) == 0) {
		return {void, void};
	}

	return {deltaData, void};
}

//
function BulletModel::Unmarshal(model){
	
	if(model == void) {
		return;
	}
	
	foreach(var field in model) {
		var key = field[0], value = field[1];
		
		switch(key) {
		case "Pid":
			this.Pid = value;
			break;
		case "position":
			this.position = value;
			break;
		case "direction":
			this.direction = value;
			break;
		case "speed":
			this.speed = value;
			break;
		case "damage":
			this.damage = value;
			break;
		case "rof":
			this.radiusOfInfluence = value;
			break;
		case "dead":
			this.dead = value;
			break;
		}
	}
}

#endif
