#ifndef UTILS_S3D
#define UTILS_S3D

/**
 * minimum between two numbers
 * 
 * @param[in]	a	float, first term
 * @param[in]	b	float, second term
 * @return minimum between a and b 
 */
function min(a, b) {
	if (a<b) {
		return a;
	}
	return b;
}

/**
 * maximum between two numbers
 * 
 * @param[in]	a	float, first term
 * @param[in]	b	float, second term
 * @return maximum between a and b 
 */
function max(a, b) {
	if (a>b) {
		return a;
	}
	return b;
}

/**
 * test if an event is set
 * 
 * @param[in]	event, event in wich the event should be set
 * @param[in]	maskEvent, event to test 
 * @return	true if the event is set, false otherwise
 */
function isEventSet(event, maskEvent) {
	var res = event & maskevent;
	if(res == 0){
		return false;
	}
	return true;
}

/**
 * return red component of an integer
 * 
 * @param[in]	integer, integer value 
 * @return		int, red component
 */
function RedComponentOfInt(integer) {
	var redBitmask = Int(255 * (2 ^ 16));
	
	return Int((integer & redBitmask )/ 2^16);
}

/**
 * return green component of an integer
 * 
 * @param[in]	integer, integer value 
 * @return		int, green component
 */
function GreenComponentOfInt(integer) {
	var greenBitmask = Int(255 * (2 ^ 8));
	
	return Int((integer & greenBitmask) / 2^8);
}

/**
 * return blue component of an integer
 * 
 * @param[in]	integer, integer value 
 * @return		int, blue component
 */
function BlueComponentOfInt(integer) {
	var bluemask = Int(255);
	
	return Int((integer & bluemask));
}

#endif
