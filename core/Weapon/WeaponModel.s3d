#ifndef WEAPON_MODEL_S3D
#define WEAPON_MODEL_S3D

#include "../Bullet/BulletModel.s3d"

/**
 * WeaponModel class represent a weapon
 * 
 * This class provide all methods to manage a weapon
 * 
 */
class WeaponModel {
	var Pid;	/**< int, id of the player owning this */

	var name;				/**< name of the weapon */ 	
	var attackInterval; 	/**< float, time between a shoot and another shoot  */ 
	var damagePoints; 		/**< int, base damage */
	var magazineSize; 		/**< int, maximum no. bullets the weapon can have */ 
	var nBullets; 			/**< int, no. bullets in the magazine */
	var reloadInterval;		/**< float, time between a reload and the next one */
	var nextShootTimeout;	/**< float, time between a shoot and the next one*/
	var radiusOfInfluence;	/**< float, radius of the shooted bullets */
	
	/**
	 * WeaponModel Ctor
	 * 
	 * @param[in]	pid		int, player id
	 * @param[in]	attackInterval	float, time between a shoot and the next one
	 * @param[in]	damagePoints	int, damage points with which the bullet is eventually fired
	 * @param[in]	magazineSize	int, no. bullets the magazine can contain
	 * @param[in]	reloadInterval	float, time to reload the weapon
	 * @param[in]	radiusOfInfluence	float, diameter of the fired bullets
	 * @return WeaponModel
	 * 
	 */
	WeaponModel(pid, attackInterval, damagePoints, magazineSize, reloadInterval, radiusOfInfluence);
	
	/**
	 * Reload the weapon
	 * 
	 * @param[in]	n	number of bullets to reload
	 * @return	no bullets remained (not reloaded)
	 */
	Reload(n);
	
	/**
	 * Shoot a bullet
	 * 
	 * @param[in]	position	starting position of the bullet
	 * @param[in]	direction	direction of the shooted bullet
	 * @return	Bullet object, bullet just shooted
	 */
	Shoot(position, direction);
	
	/**
	 * Update the state of the weapon
	 */
	Update();
};

//
function WeaponModel::WeaponModel(pid, attackInterval, damagePoints, magazineSize, reloadInterval, radiusOfInfluence) {
	this.pid = pid;
	this.attackInterval = attackInterval;
	this.damagePoints = damagePoints;
	this.magazineSize = magazineSize;
	this.nBullets = magazineSize;
	this.reloadInterval = reloadInterval;
	this.nextShootTimeout = 0.0;
	this.radiusOfInfluence = radiusOfInfluence;
}

//
function WeaponModel::Shoot(position, direction){
	if (nextShootTimeout <= 0 && nBullets > 0) {
		position += [0,1,0] + 1.0*direction;
		var b = BulletModel(this.Pid, position, direction, BULLET_DEFAULT_SPEED, damagePoints, radiusOfInfluence);
		nextShootTimeout = attackInterval;
		nBullets--;
		return b;
	}
}

//
function WeaponModel::Reload(nBul) {
	var missing = magazineSize - nBullets;
	if (nBul >= missing) {
		nBul -= missing;
		nBullets += missing; 
	} else {
		nBullets += Nbul;
		Nbul = 0;
	}
	return Nbul;
}

//
function WeaponModel::Update(){
	if (nextShootTimeout > 0) {
		nextShootTimeout -= 0.01;
	}
}

/**
 * Create a RocketLauncher Weapon
 * 
 * Really slow, but shoots strong and big bullets
 * 
 * @param[in]	pid		int, player id
 * @return WeaponModel of a rocket launcher
 */
function NewRocketLauncherModel(pid) {
	
	var w = WeaponModel(pid, 1.0, 5, 3, 3.0, 0.3);
	w.name = "rocketLauncher";
	
	return w;
}

/**
 * Create a RailGun Weapon
 * 
 * really fast, but shoots weak and small bullets
 * 
 * @param[in]	pid		int, player id
 * @return WeaponModel of a railgun
 */
function NewRailGunModel(pid) {
	
	var w = WeaponModel(pid, 0.2, 1, 50, 1.5, 0.05);
	w.name = "railgun";
	
	return w;
}

#endif
