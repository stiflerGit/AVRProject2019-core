#ifndef PLAYER_GFX_S3D
#define PLAYER_GFX_S3D

#include "PlayerModel.s3d"
#include "../Level.s3d"
#include "../Weapon/WeaponGFX.s3d"
#include "../Bullet/BulletGFX.s3d"

#define SWAT_START_WALK 16
#define SWAT_END_WALK   48

class PlayerGFX : PlayerModel {
	// graphics
	var lowerObj;
	var upperObj;
	var obj;
	var currentFrame;
	var frameStep;
	var color;
	// sound
	var stepFx;
	var jumpFx;
	var hitFx;
	var playStep, playJump, playHit;
	
	Init(col);
	Draw();
	SetPosition(pos);
	SetRotation(angle);
	Update(event);
	//
	Unmarshall(data);
	
	updateGFX(event);
	addToCurrentFrameToNextFrame(fStep);
};

/**
 * 
 */
function PlayerGFX::Unmarshall(data) {
	var wasInTheAir = isInTheAir;
	var oldHP = this.Hp;
	PlayerModel::this.Unmarshall(data);
	
	if (hVel != 0){
		var fStep = 1;			
		if (hVel > PLAYER_VELOCITY) {
			fStep = 2;
		} else if(hVel < 0) {
			fStep = -1;
		}
		addToCurrentFrameToNextFrame(fStep);
	}
	
	if (!wasInTheAir && vVel > 0) {
		playJump = true;
	}
	
	if (oldHp > this.Hp) {
		playHit = true;
	}
}

/**
 * 
 */
function PlayerGFX::Init(color) {	
	
	this.color = color;
	
	var lowerMesh =  CVmNewMesh("swat_lower.aam");
	lowerObj = CVmObj(lowerMesh);
	var scaling = lowerObj.Normalize(1);
	var upperMesh = CVmNewMesh("swat_upper.aam");
	upperObj = CVmObj(upperMesh);
	upperObj.SetScale(scaling);
	
	obj = CVmObj();
	obj.addchild(upperObj);
	obj.addchild(lowerObj);
	
	if (weapon.name == "railgun") {
		weapon = NewRailgun(this.ID, scaling);	
	} else {
		weapon = NewRocketLauncher(this.ID, scaling);
	}
	
	obj.addchild(weapon.obj);
	
	obj.ModulateMaterials(color);
	// sound
	stepFx = CVmVRAWAV("step.wav");
	jumpFx = CVmVRAWAV("jump.wav");
	hitFx = CVmVRAWAV("hit.wav");
	// init
	frameStep = 1.0;
	currentFrame = SWAT_START_WALK;
	
	obj.setrotation(this.angle*180.0/PI, 0, 1, 0);
	obj.setposition(this.position);
	
	playStep = false;
	playJump = false;	
	playHit = false;
}

/**
 * 
 */
function PlayerGFX::Update(event) {
	updateGFX(event);
	PlayerModel::this.Update(event);
}

/**
 * 
 */
function PlayerGFX::updateGFX(event) {
	if (!isInTheAir) {
		var fStep = 1;
		if (isEventSet(event, PLAYER_RUN)) {
			fStep = 2;
		}
		
		if (isEventSet(event, PLAYER_UP)) {
			AddToCurrentFrameToNextFrame(fStep);
		} else if (isEventSet(event, PLAYER_DOWN)) {
			AddToCurrentFrameToNextFrame(-fStep);
		}
		
		if (isEventSet(event, PLAYER_JUMP)) {
			playJump = true;
		}
	}
}

/**
 * 
 */
function PlayerGFX::Draw() {
	
	if (IsDead()) {
		this.obj.Hide();
		foreach (var bullet in shootedBullets) {
			if (bullet != void) {
				var b = BulletGFX(ID, bullet.position, bullet.direction, bullet.speed, bullet.damage, weapon.radiusOfInfluence);
				b.Init();
				b.Draw();
			}
		}
		return;
	}
	
	this.obj.Unhide();
	obj.SetRotation(angle*180.0/PI, 0, 1, 0);
	obj.SetPosition(position);
	obj.Draw(VR_FRAMENUMBER, currentFrame);
	
	foreach (var bullet in shootedBullets) {
		if (bullet != void) {
			var b = BulletGFX(ID, bullet.position, bullet.direction, bullet.speed, bullet.damage, weapon.radiusOfInfluence);
			b.Init();
			b.Draw();
		}
	}
	
	if (playStep) {
		stepFx.Play();
		playStep = false;
	}
	if (playJump) {
		jumpFx.Play();
		playJump = false;
	}
	if (playHit) {
		hitFx.Play();
		playHit = false;
	}

}

/**
 * 
 */
function PlayerGFX::AddToCurrentFrameToNextFrame(fStep) {
	currentFrame += fStep;
	if (currentFrame > SWAT_END_WALK){
		playStep = true;
		currentFrame = SWAT_START_WALK;
	} else if(currentFrame < SWAT_START_WALK){
		playStep = true;
		currentFrame = SWAT_END_WALK;
	}
}

#endif
