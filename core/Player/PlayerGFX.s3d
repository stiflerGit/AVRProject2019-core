#ifndef PLAYER_GFX_S3D
#define PLAYER_GFX_S3D

#include "PlayerModel.s3d"
#include "../Level.s3d"
#include "../Weapon/WeaponGFX.s3d"
#include "../Bullet/BulletGFX.s3d"

/**
 * internals
 */
#define SWAT_START_WALK 16
#define SWAT_END_WALK   48

/**
 * PlayerGFX add graphic propriety to PlayerModel
 */
class PlayerGFX : PlayerModel {
	// graphics
	var lowerObj;		/**< CvmObj, obj with lower player mesh */
	var upperObj;		/**< CvmObj, obj with upper player mesh */
	var obj;			/**< CvmObj, obj of the player  */
	var currentFrame;	/**< int, frame to draw */
	var frameStep;		/**< int, step frame to sum when player moves */
	var color;			/**< vector, rgb color of the player surface */
	var weaponToHide;	/**< int, weapon index to hide at screen */
	// sound
	var stepFx;			/**< sound effect of walk step */
	var jumpFx;			/**< sound effect of jump */
	var hitFx;			/**< sound effect when hitted by a bullet */
	var playStep, playJump, playHit;
		/**< bool, if true the respective sound will be played on Draw call*/
	
	/**
	 * Initialize all graphical objects
	 * 
	 * @param[in]	col	color of the mesh surface 
	 */
	Init(col);
	
	/**
	 * Draw the actual state of the player 
	 */
	Draw();
	
	/**
	 * Override
	 */
	Update(event);
	
	/**
	 * Override
	 */
	Unmarshal(data);
	
	/**
	 * private
	 */
	updateGFX(event);
	addToCurrentFrameToNextFrame(fStep);
};

//
function PlayerGFX::Init(color) {	
	
	this.color = color;
	
	var lowerMesh =  CVmNewMesh("swat_lower.aam");
	lowerObj = CVmObj(lowerMesh);
	var scaling = lowerObj.Normalize(1);
	var upperMesh = CVmNewMesh("swat_upper.aam");
	upperObj = CVmObj(upperMesh);
	upperObj.SetScale(scaling);
	
	obj = CVmObj();
	obj.addchild(upperObj);
	obj.addchild(lowerObj);
	
	weapons = {
		NewRailgun(this.ID, scaling),
		NewRocketLauncher(this.ID, scaling)
	};
	weaponToHide = -1;
	
	foreach(var weapon in weapons) {
		obj.addchild(weapon.obj);
		weapon.obj.Hide();
	}
	
	obj.ModulateMaterials(color);
	// sound
	stepFx = CVmVRAWAV("step.wav");
	jumpFx = CVmVRAWAV("jump.wav");
	hitFx = CVmVRAWAV("hit.wav");
	// init
	frameStep = 1.0;
	currentFrame = SWAT_START_WALK;
	
	obj.setrotation(this.angle*180.0/PI, 0, 1, 0);
	obj.setposition(this.position);
	
	playStep = false;
	playJump = false;	
	playHit = false;
}

//
function PlayerGFX::Update(event) {
	updateGFX(event);
	PlayerModel::this.Update(event);
}

//
function PlayerGFX::Draw() {
	
	if (IsDead()) {
		this.obj.Hide();
		foreach (var bullet in shootedBullets) {
			bullet.Draw();
		}
		return;
	}

	if (weaponToHide >= 0) {
		weapons[weaponToHide].obj.Hide();
		weaponToHide = -1;
	}
	
	this.obj.Unhide();
	
	obj.SetRotation(angle*180.0/PI, 0, 1, 0);
	obj.SetPosition(position);
	obj.Draw(VR_FRAMENUMBER, currentFrame);
	
	this.weapons[actualWeaponIdx].obj.Unhide();
	this.weapons[actualWeaponIdx].Draw();
	
	foreach (var bullet in shootedBullets) {
		bullet.Draw();
	}
	
	if (playStep) {
		stepFx.Play();
		playStep = false;
	}
	if (playJump) {
		jumpFx.Play();
		playJump = false;
	}
	if (playHit) {
		hitFx.Play();
		playHit = false;
	}

}

//
function PlayerGFX::AddToCurrentFrameToNextFrame(fStep) {
	currentFrame += fStep;
	if (currentFrame > SWAT_END_WALK){
		playStep = true;
		currentFrame = SWAT_START_WALK;
	} else if(currentFrame < SWAT_START_WALK){
		playStep = true;
		currentFrame = SWAT_END_WALK;
	}
}

//
function PlayerGFX::Unmarshal(data) {
	var wasInTheAir = isInTheAir;
	var oldHP = this.Hp;
	var oldWeaponIdx = this.ActualWeaponIdx;
	PlayerModel::this.Unmarshal(data);
	
	for(var i=0; i<len(shootedBullets); i++) {
		var b = shootedBullets[i];
		var bullet = BulletGFX(b.Pid, b.position, b.direction, b.speed, b.damage, b.radiusOfInfluence);
		bullet.Init();
		if (b.IsDead()) {
			bullet.Kill();
		}
		shootedBullets[i] = bullet;
	}
	
	if (hVel != 0){
		var fStep = 1;			
		if (hVel > PLAYER_VELOCITY) {
			fStep = 2;
		} else if(hVel < 0) {
			fStep = -1;
		}
		addToCurrentFrameToNextFrame(fStep);
	}
	
	if (oldWeaponIdx != actualWeaponIdx) {
		weaponToHide = oldWeaponIdx;
	}
	
	if (!wasInTheAir && vVel > 0) {
		playJump = true;
	}
	
	if (oldHp > this.Hp) {
		playHit = true;
	}
}

//
function PlayerGFX::updateGFX(event) {
	if(IsDead()) {
		return;
	}
	
	if (!isInTheAir) {
		var fStep = 1;
		if (isEventSet(event, PLAYER_RUN)) {
			fStep = 2;
		}
		
		if (isEventSet(event, PLAYER_UP)) {
			AddToCurrentFrameToNextFrame(fStep);
		} else if (isEventSet(event, PLAYER_DOWN)) {
			AddToCurrentFrameToNextFrame(-fStep);
		}
		
		if (isEventSet(event, PLAYER_JUMP)) {
			playJump = true;
		}
	}
	
	if(isEventSet(event, PLAYER_NEXTWEAPON)) {
		weaponToHide = actualWeaponIdx;
	}
}

#endif
