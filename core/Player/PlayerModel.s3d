#ifndef PLAYER_MODEL_S3D
#define PLAYER_MODEL_S3D

#include "../Level.s3d"
#include "../utils.s3d"
#include "../Weapon/WeaponModel.s3d"
#include "../Bullet/BulletModel.s3d"

/**
 * default constants, used in the player constructor 
 * if the corresponding variable is void
 */
#define PLAYER_DEFAULT_HP 100			/**< health points*/
#define PLAYER_DEFAULT_ANGLE 0			/**< starting angle */
#define PLAYER_DEFAULT_NOWNBULLETS 9999	/**< no bullets owned */
#define PLAYER_DEFAULT_STEP 0.1			/**< time step for the simulation */

/**
 * internal defaults
 */
#define PLAYER_DEFAULT_PPPOSITION_ACCURACY 3	/**< default post process postion accuracy */
#define PLAYER_JUMP_HEIGHT 1.1					/**< height of the jump when not running */
#define PLAYER_JUMP_LENGTH 3					/**< lenght of the jump when not running*/
#define PLAYER_VELOCITY 1.0						/**< moving velocity when not running*/

/**
 * input events for the PlayerModel.Update()
 */
#define PLAYER_RUN 			1	/**< move faster if moving */
#define PLAYER_LEFT 		2	/**< rotate left*/
#define PLAYER_RIGHT 		4	/**< rotate right*/
#define PLAYER_UP 			8	/**< go straight*/
#define PLAYER_DOWN 		16	/**< go ahead */
#define PLAYER_SHOOT 		32	/**< shoot with the current weapon */
#define PLAYER_RELOAD 		64	/**< reload the current weapon */
#define PLAYER_JUMP 		128	/**< jump */
#define PLAYER_NEXTWEAPON	256	/**< switch to next weapon held */

/**
 * PlayerModel class represent a player
 * 
 * This class provide all methods to manage the player
 * 
 */
class PlayerModel {
	// parent
	var level;	/**< class, level where the player resides */
	//
	var ID;			/**< int, unique Id of the player */
	var position;	/**< vector, position of the player */
	var angle;		/**< float, rotation angle wrt Y world axids*/
	var direction;	/**< vector, going direction */
	var hVel, vVel; /**< horizontal and vertical velocity */
	var gravity;	/**< float, gravity for jump or falling */
	var step;		/**< float, time step used for simulation */
	//
	var weapons;			/**< WeaponModel Array, weapons held */
	var actualWeaponIdx;	/**< int, index of the weapon actually used */
	var shootedBullets;		/**< BulletModel Array, bullet shooted by the player */
	var nOwnedBullets;		/**< int, no. held bullets */
	var reloadTimeout;		/**< float, timeout that start after a reload for the next reload */
	var isInTheAir;			/**< bool, true when player is in the air */
	var hp;					/**< int, health point */
	
	/*
	 * PlayerModel Ctor
	 * 
	 * @param[in]	level	Level Obj, level in which the player resides
	 * @param[in]	ID	int, id 
	 * @param[in]	position	float vector, space position
	 * @param[in]	angle		float, angle with respect to y axis
	 * @param[in]	step	float, time step for simulation
	 * @param[in] 	nOwnedBullets	int, no bullets owned
	 * @param[in]	hp	int, health points
	 */
	PlayerModel(level, ID, position, angle, step, nOwnedBullets, hp);
	 
	/**
	 * Restart when player is dead
	 * 
	 * @param[in]	position	float vector, space position
	 * @param[in]	nOwnedBullets	int, no bullet with which the player will restart
	 * @param[in]	hp	int, health points 
	 */
	Restart(position, nOwnedBullets, hp);
	
	/**
	 * test function for player health state
	 * 
	 * @return bool, true if the player is dead, false otherwise
	 */
	IsDead();
	
	/**
	 * Get the position of the player's head
	 * 
	 * @return vector, position of the head 
	 */
	GetHeadPosition();
	
	/**
	 * Update the state of the player by means of events (such as a FSM)
	 * 
	 * @param[in] event int, bitmask of events
	 */
	Update(event);
	
	/**
	 * Remove void bullets in the shootedBullets array
	 */
	RemoveVoidBullets();
	
	/**
	 * Test if the player is colliding with a given bullet
	 * 
	 * @param[in]	bullet	bulletModel class, bullet to test
	 * @return	bool, true if the player collides with the given bullet,
	 * 				false otherwise.  
	 */
	IsCollidingWithBullet(bullet);
	
	/**
	 * Marshall and Unmarshall functions to comunicate with server 
	 */
	Marshall();
	MarshallDelta(model);
	Unmarshall(model);
	UnmarshallShootedBullets(model);
	MarshallShootedBullets();
	MarshallShootedBulletsDelta(model);
	
	/**
	 * private use only functions
	 */
	reload();
	isReloading();
	isPathCollidingWithWall(oldposition, position);
	postProcessPosition(oldposition, newposition, i);
	postProcessPositionXZ(oldposition, newposition, i);
	postProcessPositionY(oldposition, newposition, i);
	postProcessIsInTheAir();
};

//
function PlayerModel::PlayerModel(level, ID, position, angle, step, nOwnedBullets, hp) {
	
	this.level = level;
	
	this.ID = ID;
	
	this.position = position;
	
	if (angle == void) {
		angle = PLAYER_DEFAULT_ANGLE;
	}
	this.angle = angle;
	direction = [sin(angle), 0, cos(angle)];
	
	if (step == void) {
		step = PLAYER_DEFAULT_STEP;
	}
	this.step = step;
	
	if (nOwnedBullets == void){
		nOwnedBullets = PLAYER_DEFAULT_NOWNBULLETS; 
	}
	this.nOwnedBullets = nOwnedBullets;
	
	if (hp == void){
		hp = PLAYER_DEFAULT_HP;
	}
	this.hp = hp;
	
	this.weapons = {
		NewRailgunModel(this.ID),
		NewRocketLauncherModel(this.ID)
	};
	
	isInTheAir = false;
	hVel = 0.0;
	vVel = 0.0;
	gravity = 0.0;
	reloadTimeout = 0.0;
	actualWeaponIdx = 0;
	
	shootedBullets = Array(0);
}

//
 function PlayerModel::Restart(position, nOwnedBullets, hp) {
	
	this.position = position;
	
	angle = PLAYER_DEFAULT_ANGLE;
	direction = [sin(angle), 0, cos(angle)];
	
	if (nOwnedBullets == void){
		nOwnedBullets = PLAYER_DEFAULT_NOWNBULLETS; 
	}
	this.nOwnedBullets = nOwnedBullets;
	
	if (hp == void){
		hp = PLAYER_DEFAULT_HP;
	}
	this.hp = hp;
	
	foreach(var weapon in weapons) {
		weapon.Reload(weapon.MagazineSize);
	}
	
	isInTheAir = false;
	hVel = 0.0;
	vVel = 0.0;
	gravity = 0.0;
	reloadTimeout = 0.0;
}

//
function PlayerModel::IsDead() {
	if (this.Hp <= 0) {
		return true;
	}
	return false;
} 
 
//
function PlayerModel::RemoveVoidBullets() {
	// remove deleted bullets
	for(var i=0; i<len(shootedBullets);){
		if (shootedBullets[i] == void) {
			adel(shootedBullets, i);
			continue;
		}
		i++;
	}
}

//
function PlayerModel::GetHeadPosition() {
	var headPosition = this.position + (0.3) * this.direction;
	headPosition.y = headPosition.y + 1.5;
	return (headPosition);
}

//
function PlayerModel::Update(event) {
	
	if (IsDead()) {
		// update only bullets	
		foreach (var bullet in shootedBullets) {
			if (bullet!= void) {
				bullet.Update();
			}
		}
		return;
	}
		 
	if (!isInTheAir) {
		var runMultiplicator = 1.0;
		if (isEventSet(event, PLAYER_RUN)) {
			runMultiplicator = 1.5;
		}
		
		hVel = 0;
		if (isEventSet(event, PLAYER_UP)) {
			hVel = PLAYER_VELOCITY * runMultiplicator;
		} else if (isEventSet(event, PLAYER_DOWN)) {
			hVel = -PLAYER_VELOCITY;
		}
		
		// angle and direction
		if (isEventSet(event, PLAYER_RIGHT | PLAYER_LEFT)){
			if (isEventSet(event, PLAYER_RIGHT)) {
				angle -= 0.02;
			}
			if (isEventSet(event, PLAYER_LEFT)) {
				angle += 0.02;
			}
			direction = [sin(angle), 0, cos(angle)];
		}
	    
	    if (isEventSet(event, PLAYER_JUMP)) {
	    	var vx = PLAYER_VELOCITY;
	    	var h = runMultiplicator * PLAYER_JUMP_HEIGHT;
	    	var xh = runMultiplicator * PLAYER_JUMP_LENGTH / 2.0;
	    	if (hVel != 0) {
	    		vx = abs(hVel);
	    	}
	    	gravity = 2.0 * h * (vx^2) / (xh^2);
	    	vVel = 2.0 * h * vx / xh;
	    }
	}
	
	if (isReloading()) {
		reloadTimeout -= 0.01;
	} else if(isEventSet(event, PLAYER_RELOAD)) {
		this.reload();
	}
		
	if (isEventSet(event, PLAYER_SHOOT)) {
		var weapon = weapons[actualWeaponIdx];
		var bullet = weapon.Shoot(position, direction);
		if (bullet != void) {
			aadd(shootedBullets, bullet);
		}
	}
	
	if (isEventSet(event, PLAYER_NEXTWEAPON)) {
		actualWeaponIdx = (actualWeaponIdx + 1) % len(weapons);
	}
	
	var oldposition = position;
	
	if (hVel != 0) {
		position += (hVel*direction*step);	
	}
    
    if (vVel != 0 || gravity != 0) {
    	position.y += (vVel*step - 0.5 * gravity * (step^2));
    	vVel -= (gravity*step);
    }
    
    this.position = postProcessPosition(oldposition, position, PLAYER_DEFAULT_PPPOSITION_ACCURACY);
    this.isInTheAir = postProcessIsInTheAir();
    if (!isInTheAir) {
    	vVel = 0; gravity = 0;
    } else if(gravity == 0) {
    	gravity = 2.0 * PLAYER_JUMP_HEIGHT * (PLAYER_VELOCITY^2) / ((PLAYER_JUMP_LENGTH / 2.0)^2);
    }
	
	weapons[actualWeaponIdx].Update();
	
	foreach (var bullet in shootedBullets) {
		if (bullet!= void) {
			bullet.Update();
		}
	}
	
}

//
function PlayerModel::IsCollidingWithBullet(bullet) {
	if (IsDead()) {
		return false;
	}
	
	var x0 = bullet.position,
		x1 = position,
		x2 = position + [0,1,0];
	
  	var t = ((x1 - x0) * (x2 - x1))/(Modulus(x2 - x1) ^ 2);
  	
  	t = min(max(0, t), 1);
  	
  	var nearestPoint = x1 + t*(x2 - x1);
  	
  	var distance = Modulus(nearestPoint - x0);
  	
  	if (distance < 1 + bullet.radiusOfInfluence) {
  		return true;
  	}
  	return false;
}
 
//
function PlayerModel::Marshall() {
	
	var bulletsData = MarshallShootedBullets();
	
	var data = {
		{"ID", ID},
		{"position", position},
		{"angle", angle},
		{"direction", direction},
		{"hVel", hVel},
		{"vVel", vVel},
		{"nOwnedBullets", nOwnedBullets},
		{"reloadTimeout", reloadTimeout},
		{"isInTheAir", isInTheAir},
		{"hp", hp},
		{"shootedBullets", bulletsData},
		{"actualWeaponIdx", actualWeaponIdx}
	};
	
	return data;
}

// 
function PlayerModel::MarshallDelta(Data) {
	var myData = this.Marshall();
	
	if (Data == void || len(Data) == 0) {
		return myData;
	}
	
	if(len(data) < len(myData)) {
		OutputLN("ERROR len(model) < len(myModel)");
	}
	
	var deltaData = Array(0);
	for (var i=0; i<len(myData); i++){
		var myDataKey = myData[i][0], myDataVal = myData[i][1];
		var DataKey = Data[i][0], DataVal = Data[i][1];
		
		if (myDataKey=="shootedBullets") {
//			var shootedBulletDeltaDatas = MarshallShootedBulletsDelta(DataVal);
//			if (shootedBulletDeltaDatas != void) {
			if (myDataVal != void) {
				aadd(deltaData, {"shootedBullets", myDataVal});
			}
//			}
			continue;
		}
		
		if(DataKey != myDataKey) {
			Quit("DataKey != myDataKey");
		}
		
		if (myDataVal != DataVal) {
			aadd(deltaData, myData[i]);
		}
		
	}
	
	if(len(deltaData) == 0) {
		return void;
	}

	return deltaData;
}

//
function PlayerModel::Unmarshall(data) {
	foreach(var field in data) {
		var key = field[0], value = field[1];
		
		switch(key) {
		case "ID":
			this.ID = value;
			break;
		case "position":
			this.position = value;
			break;
		case "angle": 
			this.angle = value;
			break;
		case "direction": 
			this.direction = value;
			break;
		case "hVel": 
			this.hVel = value;
			break;
		case "vVel":
			this.vVel = value;
			break;
		case "nOwnedBullets": 
			this.nOwnedBullets = value;
			break;
		case "reloadTimeout":
			this.reloadTimeout = value;
			break;
		case "isInTheAir": 
			this.isInTheAir = value;
			break;
		case "hp":
			this.hp = value;
			break;
		case "actualWeaponIdx":
			this.actualWeaponIdx = value;
			break;
		case "shootedBullets":
			UnmarshallShootedBullets(value);
			break;
		default:
			OutputLn("unexpected field: { \"" + key + "\": \"" + field +"\" }");
			break;
		}
	}
}

//
function PlayerModel::UnmarshallShootedBullets(Data) {
	if(Data == void || len(Data) == 0) {
		return;
	}
	
	asize(shootedBullets, len(Data));
	var bulletDatas = Data;
	for (var i=0; i < len(bulletDatas); i++) {
		var bulletData = bulletDatas[i];
		
		if (bulletData == void) {
			shootedBullets[i] = void;
			continue;
		}
		
		if (len(bulletData) == 0) {
			continue;
		}
		
		if (shootedBullets[i] == void) {
			shootedBullets[i] = BulletModel(this.ID, [0,0,0], [0,0,0], 0, 0);
		}
		shootedBullets[i].Unmarshall(bulletData);
	}
	
}

//
function PlayerModel::MarshallShootedBullets() {
	var bulletModels = Array(0);
	foreach (var bullet in shootedBullets) {
		if (bullet != void) {
			aadd(bulletModels, bullet.Marshall());	
		} else {
			aadd(bulletModels, void);
		}
	}
	
	if (len(bulletModels) == 0) {
		return void;
	}
	
	return bulletModels;
}

//
function PlayerModel::MarshallShootedBulletsDelta(model) { 
		
	if(model == void || len(model) == 0) {
		return MarshallShootedBullets();
	}
	
	var deltaModels = Array(0);
	
	for(var i=0; i<len(shootedBullets); i++) {
		var shootedBullet = shootedBullets[i];
		
		if (shootedBullet == void) {
			aadd(deltaModels, void);
			continue;
		}
		
		if (i>len(model) || model[i] == void) {
			aadd(deltaModels, shootedBullet.Marshall());
			continue;
		}
		
		var deltaModel = shootedBullet.MarshallDelta(model[i]);
		if (deltaModel == void) {
			deltaModel = {};
		}
		
		aadd(deltaModels, deltaModel);
	}

}


/**
 * 
 */
function PlayerModel::reload() {
	var weapon = weapons[actualWeaponIdx];
	
	if (weapon.nbullets >= weapon.magazineSize){
		return;
	}
	
	if (nOwnedBullets == 0) {
		return;
	}

	nOwnedBullets = weapon.Reload(nOwnedBullets);
	reloadTimeout = weapon.reloadInterval;	
}

/**
 * 
 */
function PlayerModel::isReloading() {
	return reloadTimeout > 0;
}

/**
 * 
 */
function PlayerModel::isPathCollidingWithWall(oldposition, position) {
	var wall = level.getWallObjAtPosition(position);
	if (wall == void) {
		return {false, void, void, void};
	}
	var isColl, ContactPoint = vector(3),ContactNormal = vector(3);
	
	isColl = wall.isColliding(oldposition, position, &ContactPoint, &ContactNormal);
	if (isColl && ContactPoint != oldposition) {
		var wallH = wall.GetScale().y;
		if (ContactNormal == [0,1,0] || ContactPoint.y == wallH) {
			return {true, ContactPoint, ContactNormal, true};
		}
		return {true, ContactPoint, ContactNormal, false};
	}
	return {false, void, void, void};
}

/**
 * 
 */
function PlayerModel::postProcessPosition(oldposition, newposition, accuracy) {
	newposition._y_ = PostProcessPositionY(oldposition, newposition, accuracy);
	newposition.x_z = PostProcessPositionXZ(oldposition, newposition, accuracy);
	return newposition;
}

/**
 * 
 */
function PlayerModel::postProcessPositionXZ(oldposition, newposition, accuracy) {
	var ret;
	
	if (oldposition == newposition || accuracy <= 0) {
		return oldposition;
	}
	
	// dir is different from direction cause consider also deltaY
	var dir = Norm(newposition - oldposition);
	var NextPos = newposition + 0.5* dir;
	var rside = Norm(direction ^ [0,1,0]);
	var lside = Norm([0,1,0] ^ direction);
	var NextRpos = NextPos + 0.5*rside;
	var NextLpos = NextPos + 0.5*lside;
	
	var positions = {NextPos, NextLpos, NextRpos};
	
	foreach (var pos in positions) {
		ret = isPathCollidingWithWall(oldposition, pos);
		var isColl = ret[0], cp = ret[1], cn = ret[2], isOnTop = ret[3];
		
		if (isColl && !isOnTop) {
			var sen2 = (Modulus(cn ^ dir)) ^ 2;
			var wallApproachDir = Norm(((cn ^ dir) ^ cn) + 0.05 * cn);
			newposition.x_z = oldposition + sen2/20 * wallApproachDir;
			newposition = postProcessPositionXZ(oldposition, newposition, --accuracy);
			break;
		}
	}

	return newposition;
}

/**
 * 
 */
function PlayerModel::postProcessPositionY(oldposition, newposition, accuracy) {
	var ret;
	
	if (oldposition == newposition || accuracy <= 0) {
		return oldposition;
	}
	
	ret = isPathCollidingWithWall(oldposition, newposition);
	var isColl = ret[0], cp = ret[1], cn = ret[2], isOnTop = ret[3];
	
	if (isColl && isOnTop) {
		var wall = level.getWallObjAtPosition(newposition);
		var wallHeight = wall.GetScale().y;
		newposition.y = wallHeight;
	}
	
	if (newposition.y < 0) {
		newposition.y = 0;
	}

	return newposition;
}

/**
 * 
 */
function PlayerModel::postProcessIsInTheAir() {
	var wall = level.getWallObjAtPosition(this.position);
	var wallHeight = 0;
	
	if (wall != void) {
		wallHeight = wall.GetScale().y;
	}
	
	if (position.y > wallHeight) {
		return true;
	}
	
	return false;
}

#endif
