#ifndef LEVEL_S3D
#define LEVEL_S3D

#include "utils.s3d"

var levelMatrix;

class Level {
	var wallMeshes;
	var wallObjArray;
	var floorMesh;
	var wallMaterial;
	var wallTexture;
	var floorMaterial;
	var floorTexture;
	var freeIndexes;
	var skyMesh;
	var levelHeight;
	var numColumns;
	var numRows;
	
	Init(level_textfile);
	Draw();
	GetWallObjAtPosition(position);
	IsPointInside(point);
};


function level::init(levelTextFile) {
	wallTexture = CVmTexture("mattoni03.png");
	wallMaterial = CVmMaterial();
	wallMaterial.SetTexture(wallTexture);
	wallMaterial.ChangeTextureParams(VR_V_TILING, 3);
	
	freeIndexes = Array(0);
	
	wallObjArray = array(0);
	wallMeshes = Array(10);
	var f = LoadFile(levelTextFile);
	trace(f);
	numRows = len(f);
	numColumns = len(f[0]);
	levelMatrix = array(numRows);
	trace(numRows, numColumns);
	levelHeight = 0;
	for(var i=0; i< numRows; i++) {
		levelMatrix[i] = array(numColumns);
		for(var j=0; j< numColumns; j++) {
			if (f[i][j] != " ") {
				var height = val(f[i][j]);
				var mesh = wallMeshes[height-1];
				if (mesh == void) {
					mesh = CVmNewMesh(VRP_BOX);
					mesh.SetMaterial(wallMaterial);
					wallMeshes[height-1] = mesh;
				}
				if (height > levelHeight) {
					levelHeight = height;
				}
				var t = CVmObj(mesh);
				t.SetPosition(j, 0, i);
				t.setScale(1, height, 1);
				aadd(wallObjArray, t);
				levelMatrix[i][j] = len(wallObjArray) - 1;
			} else{
				levelMatrix[i][j] = -1;
				aadd(freeIndexes, {i,j});
			}
		}
	}
	
	levelHeight = levelHeight + 2; 
	
	floorMaterial = CVmMaterial();
	floorTexture  = CVMtexture("marmo.png");
	floorMaterial.SetTexture(floorTexture);
	floorMaterial.ChangeTextureParams(VR_U_TILING, 4);
	floorMaterial.ChangeTextureParams(VR_V_TILING, 4);
	
	floorMesh = CVmNewMesh(VRP_BOX);
	floorMesh.scale(numColumns, 1, numRows);
	floorMesh.translate(0, -1, 0);
	floorMesh.SetMaterial(floorMaterial);
	floorMesh.ModulateMaterials(0, 1, 0, 1);
	
	var m = max(numColumns, numRows);
	skyMesh = CVmNewMesh("Sky.aam");
	skyMesh.Translate(numColumns/2, 0, numRows/2);
}

//
function Level::Draw() {
	foreach (var t in wallObjArray) {
		t.Draw();
	}
	floorMesh.draw();
	skyMesh.Draw();
}

//
function Level::GetWallObjAtPosition(position) {
	var i = int(position.z);
	var j = int(position.x);
	var wallIdx = levelMatrix[i][j];
	if (wallIdx == -1) {
		return;
	}
	return wallObjArray[wallIdx];
}

//
function Level::IsPointInside(point) {
	if(point == void) {
		return;
	}
	
	if(point.x < 0 || point.y < 0 || point.z < 0) {
		return false;
	}
	
	if (point.x < numColumns && point.y < levelHeight && point.z < numRows) {
		return true;
	}
	return false;
}

#endif
